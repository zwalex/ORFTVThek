RE_DATA   = Regex("initializeAdworx\(\[(.*)\]\);")
MAX_PARTS = 15

####################################################################################################
def GetJSONData(url):
    content   = HTTP.Request(url).content
    data      = RE_DATA.search(content).groups()[0]
    json_data = JSON.ObjectFromString(data)

    return json_data

####################################################################################################
def MetadataObjectForURL(url):
    json_data = GetJSONData(url)
    
    if url == json_data['values']['episode']['url']:
        # The whole episode was selected
        video_data = json_data['values']['episode']
        originally_available_at = Datetime.ParseDate(video_data['date'].split(' ')[0]).date()  
    else:
        # A specific segment in the episode was selected
        video_data = json_data['values']['segment']
        originally_available_at = Datetime.ParseDate(video_data['teaser_date'].split(' ')[0]).date()

    return VideoClipObject(
        title = video_data['title'],
        summary = video_data['description'],
        thumb = video_data['teaser_image_url'],
        art = video_data['teaser_stage_image_url'],
        duration = int(video_data['duration_in_milli_seconds']),
        originally_available_at = originally_available_at  
    )

####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            container               = Container.MP4,
            video_codec             = VideoCodec.H264,
            audio_codec             = AudioCodec.AAC,
            video_resolution        = 544,
            audio_channels          = 2,
            optimized_for_streaming = True,
            parts                   = [
                PartObject(
                    key = Callback(PlayVideo, url = url, partNo = partNo)
                ) for partNo in range(MAX_PARTS)
            ]
        )
    ]

####################################################################################################
def PlayVideo(url, partNo):
    json_data = GetJSONData(url)
    
    if url == json_data['values']['episode']['url']:
        # The whole episode was selected
        maxPartNo = json_data['values']['episode']['number_of_segments'] - 1
    
        if partNo <= maxPartNo:
            for source in json_data['values']['segments'][partNo]['playlist_item_array']['sources']:
                if source['protocol'] == 'http' and source['src'].lower().endswith("mp4") and source['quality'] == 'Q6A':
                    try:
                        headers = HTTP.Request(source['src']).headers
                        return Redirect(source['src'])
                    except:
                        raise Ex.MediaGeoblocked
                    
            raise Ex.MediaNotAvailable

    else:
        # A specific segment in the episode was selected
        for source in json_data['values']['segment']['playlist_item_array']['sources']:
            if source['protocol'] == 'http' and source['src'].lower().endswith("mp4") and source['quality'] == 'Q6A':
                try:
                    headers = HTTP.Request(source['src']).headers
                    return Redirect(source['src'])
                except:
                    raise Ex.MediaGeoblocked
                
        raise Ex.MediaNotAvailable

    # This video had less than maximum parts, return filler for the rest
    return Redirect('http://dl.dropbox.com/u/2974527/Plex/filler.mp4')